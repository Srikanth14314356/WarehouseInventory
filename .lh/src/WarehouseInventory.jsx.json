{
    "sourceFile": "src/WarehouseInventory.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 46,
            "patches": [
                {
                    "date": 1755856086246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1755856291302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,343 +1,67 @@\n-import React, { useEffect, useMemo, useRef, useState } from \"react\";\r\n+import React, { useEffect, useState } from \"react\";\r\n \r\n-/**\r\n- * Warehouse Inventory with Low-Stock Alerts\r\n- * - Fetch stock (mock API in localStorage)\r\n- * - Show alert when stock < threshold\r\n- * - Auto-refresh with interval\r\n- * - Inline stock updates (−1, +1, or set value)\r\n- * - All-in-one single file (easy to drop into Vite React project)\r\n- */\r\n-\r\n-// ---------------- Mock API ----------------\r\n-const STORAGE_KEY = \"warehouse-inventory-data-v1\";\r\n-\r\n-const seedData = [\r\n-  { id: \"A-1001\", name: \"Corrugated Boxes (Small)\", sku: \"BOX-SM\", stock: 28, threshold: 40 },\r\n-  { id: \"A-1002\", name: \"Bubble Wrap 30cm\", sku: \"BUB-30\", stock: 12, threshold: 20 },\r\n-  { id: \"A-1003\", name: \"Packing Tape Clear\", sku: \"TAPE-CLR\", stock: 95, threshold: 50 },\r\n-  { id: \"A-1004\", name: \"Labels 100x150mm\", sku: \"LBL-100x150\", stock: 6, threshold: 25 },\r\n-  { id: \"A-1005\", name: \"Pallet Wrap\", sku: \"WRAP-PAL\", stock: 0, threshold: 10 },\r\n-];\r\n-\r\n-function ensureStorage() {\r\n-  if (!localStorage.getItem(STORAGE_KEY)) {\r\n-    localStorage.setItem(STORAGE_KEY, JSON.stringify(seedData));\r\n-  }\r\n-}\r\n-function readAll() {\r\n-  ensureStorage();\r\n-  return JSON.parse(localStorage.getItem(STORAGE_KEY));\r\n-}\r\n-function writeAll(items) {\r\n-  localStorage.setItem(STORAGE_KEY, JSON.stringify(items));\r\n-}\r\n-function delay(ms) {\r\n-  return new Promise((res) => setTimeout(res, ms));\r\n-}\r\n-\r\n-async function mockFetchInventory() {\r\n-  await delay(300);\r\n-  return readAll();\r\n-}\r\n-async function mockUpdateStock(id, newStock) {\r\n-  await delay(200);\r\n-  const items = readAll();\r\n-  const idx = items.findIndex((x) => x.id === id);\r\n-  if (idx !== -1) {\r\n-    items[idx].stock = Math.max(0, Number(newStock) || 0);\r\n-    writeAll(items);\r\n-  }\r\n-  return items;\r\n-}\r\n-\r\n-// ---------------- Utils ----------------\r\n-function classNames(...arr) {\r\n-  return arr.filter(Boolean).join(\" \");\r\n-}\r\n-function formatTime(dt) {\r\n-  return new Intl.DateTimeFormat(undefined, {\r\n-    hour: \"2-digit\",\r\n-    minute: \"2-digit\",\r\n-    second: \"2-digit\",\r\n-    hour12: false,\r\n-  }).format(dt);\r\n-}\r\n-\r\n-// ---------------- Main Component ----------------\r\n export default function WarehouseInventory() {\r\n   const [items, setItems] = useState([]);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState(\"\");\r\n-  const [lastUpdated, setLastUpdated] = useState(null);\r\n-\r\n-  const [filter, setFilter] = useState(\"\");\r\n-  const [onlyLow, setOnlyLow] = useState(false);\r\n   const [autoRefresh, setAutoRefresh] = useState(true);\r\n-  const [intervalMs, setIntervalMs] = useState(10000);\r\n-  const timerRef = useRef(null);\r\n \r\n-  const [drafts, setDrafts] = useState({}); // inline edit values\r\n-\r\n-  // Fetch inventory\r\n-  const fetchData = async () => {\r\n-    try {\r\n-      setError(\"\");\r\n-      setLoading(true);\r\n-      const data = await mockFetchInventory();\r\n-      setItems(data);\r\n-      setLastUpdated(new Date());\r\n-    } catch (e) {\r\n-      console.error(e);\r\n-      setError(\"Failed to fetch inventory\");\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n+  // Mock fetch (local data)\r\n+  const fetchInventory = () => {\r\n+    return [\r\n+      { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n+      { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n+      { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n+    ];\r\n   };\r\n \r\n   useEffect(() => {\r\n-    fetchData();\r\n-  }, []);\r\n-\r\n-  // Auto-refresh\r\n-  useEffect(() => {\r\n-    if (!autoRefresh) {\r\n-      if (timerRef.current) clearInterval(timerRef.current);\r\n-      return;\r\n+    setItems(fetchInventory());\r\n+    if (autoRefresh) {\r\n+      const interval = setInterval(() => setItems(fetchInventory()), 5000);\r\n+      return () => clearInterval(interval);\r\n     }\r\n-    timerRef.current = setInterval(fetchData, intervalMs);\r\n-    return () => timerRef.current && clearInterval(timerRef.current);\r\n-  }, [autoRefresh, intervalMs]);\r\n+  }, [autoRefresh]);\r\n \r\n-  const lowStockCount = useMemo(\r\n-    () => items.filter((it) => it.stock < it.threshold).length,\r\n-    [items]\r\n-  );\r\n-\r\n-  const filtered = useMemo(() => {\r\n-    let list = items;\r\n-    const q = filter.trim().toLowerCase();\r\n-    if (q) {\r\n-      list = list.filter(\r\n-        (it) =>\r\n-          it.name.toLowerCase().includes(q) ||\r\n-          it.sku.toLowerCase().includes(q) ||\r\n-          it.id.toLowerCase().includes(q)\r\n-      );\r\n-    }\r\n-    if (onlyLow) list = list.filter((it) => it.stock < it.threshold);\r\n-\r\n-    return [...list].sort((a, b) => {\r\n-      const aLow = a.stock < a.threshold ? 1 : 0;\r\n-      const bLow = b.stock < b.threshold ? 1 : 0;\r\n-      if (aLow !== bLow) return bLow - aLow;\r\n-      return a.name.localeCompare(b.name);\r\n-    });\r\n-  }, [items, filter, onlyLow]);\r\n-\r\n-  // Update stock\r\n-  const handleAdjust = async (id, delta) => {\r\n-    const item = items.find((x) => x.id === id);\r\n-    if (!item) return;\r\n-    const next = Math.max(0, item.stock + delta);\r\n-    const data = await mockUpdateStock(id, next);\r\n-    setItems(data);\r\n-    setLastUpdated(new Date());\r\n+  const updateStock = (id, delta) => {\r\n+    setItems(items.map(it =>\r\n+      it.id === id ? { ...it, stock: Math.max(0, it.stock + delta) } : it\r\n+    ));\r\n   };\r\n-  const handleSaveDraft = async (id) => {\r\n-    const value = drafts[id];\r\n-    if (value == null || value === \"\") return;\r\n-    const data = await mockUpdateStock(id, Number(value));\r\n-    setItems(data);\r\n-    setLastUpdated(new Date());\r\n-  };\r\n-  const handleChangeDraft = (id, value) => {\r\n-    setDrafts((d) => ({ ...d, [id]: value.replace(/[^0-9]/g, \"\") }));\r\n-  };\r\n \r\n   return (\r\n-    <div className=\"min-h-screen bg-gray-50 text-gray-900 p-6\">\r\n-      {/* Header */}\r\n-      <div className=\"max-w-6xl mx-auto\">\r\n-        <header className=\"flex flex-col gap-3 md:flex-row md:items-end md:justify-between\">\r\n-          <div>\r\n-            <h1 className=\"text-2xl md:text-3xl font-semibold tracking-tight\">\r\n-              Warehouse Inventory\r\n-            </h1>\r\n-            <p className=\"text-sm text-gray-600\">\r\n-              Low-Stock Alerts • Auto-Refresh • Inline Updates\r\n-            </p>\r\n-          </div>\r\n-          <div className=\"flex items-center gap-2\">\r\n-            <button\r\n-              onClick={fetchData}\r\n-              className=\"px-3 py-2 rounded-xl bg-black text-white text-sm disabled:opacity-50 shadow\"\r\n-              disabled={loading}\r\n-            >\r\n-              {loading ? \"Refreshing…\" : \"Refresh Now\"}\r\n-            </button>\r\n-            <div className=\"text-xs text-gray-600\">\r\n-              {lastUpdated && <span>Last updated: {formatTime(lastUpdated)}</span>}\r\n-            </div>\r\n-          </div>\r\n-        </header>\r\n-\r\n-        {/* Alerts */}\r\n-        <div className=\"mt-4\">\r\n-          {lowStockCount > 0 ? (\r\n-            <div className=\"rounded-2xl border border-amber-300 bg-amber-50 px-4 py-3 text-amber-900\">\r\n-              <strong className=\"font-medium\">Attention:</strong>{\" \"}\r\n-              {lowStockCount} item{lowStockCount !== 1 ? \"s\" : \"\"} below threshold.\r\n-            </div>\r\n-          ) : (\r\n-            <div className=\"rounded-2xl border border-emerald-300 bg-emerald-50 px-4 py-3 text-emerald-900\">\r\n-              <strong className=\"font-medium\">All good:</strong> No low-stock items.\r\n-            </div>\r\n-          )}\r\n-        </div>\r\n-\r\n-        {/* Controls */}\r\n-        <section className=\"mt-4 grid gap-3 md:grid-cols-3\">\r\n-          <div className=\"col-span-2 flex items-center gap-3\">\r\n-            <input\r\n-              className=\"w-full rounded-2xl border px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-black\"\r\n-              placeholder=\"Search by name, SKU, or ID…\"\r\n-              value={filter}\r\n-              onChange={(e) => setFilter(e.target.value)}\r\n-            />\r\n-            <label className=\"flex items-center gap-2 text-sm\">\r\n-              <input\r\n-                type=\"checkbox\"\r\n-                checked={onlyLow}\r\n-                onChange={(e) => setOnlyLow(e.target.checked)}\r\n-              />\r\n-              Only low stock\r\n-            </label>\r\n-          </div>\r\n-          <div className=\"flex items-center justify-between md:justify-end gap-3\">\r\n-            <label className=\"text-sm flex items-center gap-2\">\r\n-              Auto-refresh\r\n-              <input\r\n-                type=\"checkbox\"\r\n-                checked={autoRefresh}\r\n-                onChange={(e) => setAutoRefresh(e.target.checked)}\r\n-              />\r\n-            </label>\r\n-            <label className=\"text-sm flex items-center gap-2\">\r\n-              Every\r\n-              <select\r\n-                className=\"rounded-xl border px-2 py-1 text-sm\"\r\n-                value={intervalMs}\r\n-                onChange={(e) => setIntervalMs(Number(e.target.value))}\r\n-              >\r\n-                <option value={5000}>5s</option>\r\n-                <option value={10000}>10s</option>\r\n-                <option value={30000}>30s</option>\r\n-                <option value={60000}>60s</option>\r\n-              </select>\r\n-            </label>\r\n-          </div>\r\n-        </section>\r\n-\r\n-        {/* Table */}\r\n-        <div className=\"mt-4 overflow-x-auto rounded-2xl border bg-white shadow-sm\">\r\n-          <table className=\"min-w-full text-sm\">\r\n-            <thead className=\"bg-gray-100\">\r\n-              <tr className=\"text-left text-gray-600\">\r\n-                <th className=\"px-4 py-3\">Item</th>\r\n-                <th className=\"px-4 py-3\">SKU</th>\r\n-                <th className=\"px-4 py-3\">Stock</th>\r\n-                <th className=\"px-4 py-3\">Threshold</th>\r\n-                <th className=\"px-4 py-3\">Status</th>\r\n-                <th className=\"px-4 py-3\">Update</th>\r\n-              </tr>\r\n-            </thead>\r\n-            <tbody>\r\n-              {filtered.map((it) => {\r\n-                const isLow = it.stock < it.threshold;\r\n-                return (\r\n-                  <tr key={it.id} className={classNames(\"border-t\", isLow && \"bg-amber-50/60\")}>\r\n-                    <td className=\"px-4 py-3\">\r\n-                      <div className=\"font-medium\">{it.name}</div>\r\n-                      <div className=\"text-xs text-gray-500\">ID: {it.id}</div>\r\n-                    </td>\r\n-                    <td className=\"px-4 py-3\">{it.sku}</td>\r\n-                    <td className=\"px-4 py-3 font-mono\">{it.stock}</td>\r\n-                    <td className=\"px-4 py-3 font-mono\">{it.threshold}</td>\r\n-                    <td className=\"px-4 py-3\">\r\n-                      {isLow ? (\r\n-                        <span className=\"inline-flex items-center rounded-full border border-amber-300 bg-amber-100 px-2 py-0.5 text-[11px] font-semibold text-amber-900\">\r\n-                          Low\r\n-                        </span>\r\n-                      ) : (\r\n-                        <span className=\"inline-flex items-center rounded-full border border-emerald-300 bg-emerald-100 px-2 py-0.5 text-[11px] font-semibold text-emerald-900\">\r\n-                          OK\r\n-                        </span>\r\n-                      )}\r\n-                    </td>\r\n-                    <td className=\"px-4 py-3\">\r\n-                      <div className=\"flex items-center gap-2\">\r\n-                        <button\r\n-                          onClick={() => handleAdjust(it.id, -1)}\r\n-                          className=\"px-2 py-1 rounded-lg border hover:bg-gray-50\"\r\n-                        >\r\n-                          −1\r\n-                        </button>\r\n-                        <button\r\n-                          onClick={() => handleAdjust(it.id, +1)}\r\n-                          className=\"px-2 py-1 rounded-lg border hover:bg-gray-50\"\r\n-                        >\r\n-                          +1\r\n-                        </button>\r\n-                        <input\r\n-                          className=\"w-20 rounded-lg border px-2 py-1 text-sm font-mono\"\r\n-                          placeholder={`${it.stock}`}\r\n-                          value={drafts[it.id] ?? \"\"}\r\n-                          onChange={(e) => handleChangeDraft(it.id, e.target.value)}\r\n-                          inputMode=\"numeric\"\r\n-                        />\r\n-                        <button\r\n-                          onClick={() => handleSaveDraft(it.id)}\r\n-                          className=\"px-3 py-1.5 rounded-lg bg-black text-white text-xs\"\r\n-                        >\r\n-                          Save\r\n-                        </button>\r\n-                      </div>\r\n-                    </td>\r\n-                  </tr>\r\n-                );\r\n-              })}\r\n-\r\n-              {!loading && filtered.length === 0 && (\r\n-                <tr>\r\n-                  <td colSpan={6} className=\"px-4 py-12 text-center text-gray-500\">\r\n-                    No items found.\r\n-                  </td>\r\n-                </tr>\r\n-              )}\r\n-              {loading && (\r\n-                <tr>\r\n-                  <td colSpan={6} className=\"px-4 py-12 text-center text-gray-500\">\r\n-                    Loading…\r\n-                  </td>\r\n-                </tr>\r\n-              )}\r\n-              {error && (\r\n-                <tr>\r\n-                  <td colSpan={6} className=\"px-4 py-3 text-center text-red-700 bg-red-50\">\r\n-                    {error}\r\n-                  </td>\r\n-                </tr>\r\n-              )}\r\n-            </tbody>\r\n-          </table>\r\n-        </div>\r\n-\r\n-        <p className=\"mt-4 text-xs text-gray-500\">\r\n-          Demo uses <code>localStorage</code> as a mock backend. Replace{\" \"}\r\n-          <code>mockFetchInventory</code> / <code>mockUpdateStock</code> with real API calls.\r\n-        </p>\r\n-      </div>\r\n+    <div style={{ padding: 20, fontFamily: \"Arial\" }}>\r\n+      <h2>📦 Warehouse Inventory</h2>\r\n+      <label>\r\n+        <input\r\n+          type=\"checkbox\"\r\n+          checked={autoRefresh}\r\n+          onChange={() => setAutoRefresh(!autoRefresh)}\r\n+        /> Auto Refresh\r\n+      </label>\r\n+      <table border=\"1\" cellPadding=\"8\" style={{ marginTop: 10, width: \"100%\" }}>\r\n+        <thead>\r\n+          <tr>\r\n+            <th>Item</th>\r\n+            <th>Stock</th>\r\n+            <th>Threshold</th>\r\n+            <th>Alert</th>\r\n+            <th>Update</th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {items.map(it => (\r\n+            <tr key={it.id} style={{ background: it.stock < it.threshold ? \"#ffcccc\" : \"\" }}>\r\n+              <td>{it.name}</td>\r\n+              <td>{it.stock}</td>\r\n+              <td>{it.threshold}</td>\r\n+              <td>{it.stock < it.threshold ? \"⚠ Low Stock\" : \"\"}</td>\r\n+              <td>\r\n+                <button onClick={() => updateStock(it.id, -1)}>-</button>\r\n+                <button onClick={() => updateStock(it.id, +1)}>+</button>\r\n+              </td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </table>\r\n     </div>\r\n   );\r\n }\r\n"
                },
                {
                    "date": 1755856406556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,17 @@\n import React, { useEffect, useState } from \"react\";\r\n+import \"./WarehouseInventory.css\"; // import css file\r\n \r\n export default function WarehouseInventory() {\r\n   const [items, setItems] = useState([]);\r\n   const [autoRefresh, setAutoRefresh] = useState(true);\r\n \r\n   // Mock fetch (local data)\r\n-  const fetchInventory = () => {\r\n-    return [\r\n-      { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n-      { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n-      { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n-    ];\r\n-  };\r\n+  const fetchInventory = () => [\r\n+    { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n+    { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n+    { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n+  ];\r\n \r\n   useEffect(() => {\r\n     setItems(fetchInventory());\r\n     if (autoRefresh) {\r\n@@ -27,18 +26,19 @@\n     ));\r\n   };\r\n \r\n   return (\r\n-    <div style={{ padding: 20, fontFamily: \"Arial\" }}>\r\n+    <div className=\"container\">\r\n       <h2>📦 Warehouse Inventory</h2>\r\n-      <label>\r\n+      <label className=\"autorefresh\">\r\n         <input\r\n           type=\"checkbox\"\r\n           checked={autoRefresh}\r\n           onChange={() => setAutoRefresh(!autoRefresh)}\r\n         /> Auto Refresh\r\n       </label>\r\n-      <table border=\"1\" cellPadding=\"8\" style={{ marginTop: 10, width: \"100%\" }}>\r\n+\r\n+      <table>\r\n         <thead>\r\n           <tr>\r\n             <th>Item</th>\r\n             <th>Stock</th>\r\n@@ -48,9 +48,9 @@\n           </tr>\r\n         </thead>\r\n         <tbody>\r\n           {items.map(it => (\r\n-            <tr key={it.id} style={{ background: it.stock < it.threshold ? \"#ffcccc\" : \"\" }}>\r\n+            <tr key={it.id} className={it.stock < it.threshold ? \"low-stock\" : \"\"}>\r\n               <td>{it.name}</td>\r\n               <td>{it.stock}</td>\r\n               <td>{it.threshold}</td>\r\n               <td>{it.stock < it.threshold ? \"⚠ Low Stock\" : \"\"}</td>\r\n"
                },
                {
                    "date": 1755856491219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,20 @@\n import React, { useEffect, useState } from \"react\";\r\n-import \"./WarehouseInventory.css\"; // import css file\r\n+import \"./WarehouseInventory.css\";\r\n \r\n export default function WarehouseInventory() {\r\n   const [items, setItems] = useState([]);\r\n   const [autoRefresh, setAutoRefresh] = useState(true);\r\n \r\n-  // Mock fetch (local data)\r\n+  // Mock fetch (7 items)\r\n   const fetchInventory = () => [\r\n     { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n     { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n     { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n+    { id: 4, name: \"Labels\", stock: 8, threshold: 15 },\r\n+    { id: 5, name: \"Pallet Wrap\", stock: 0, threshold: 5 },\r\n+    { id: 6, name: \"Plastic Bags\", stock: 12, threshold: 10 },\r\n+    { id: 7, name: \"Stretch Film\", stock: 3, threshold: 10 },\r\n   ];\r\n \r\n   useEffect(() => {\r\n     setItems(fetchInventory());\r\n"
                },
                {
                    "date": 1755856525700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,71 +0,0 @@\n-import React, { useEffect, useState } from \"react\";\r\n-import \"./WarehouseInventory.css\";\r\n-\r\n-export default function WarehouseInventory() {\r\n-  const [items, setItems] = useState([]);\r\n-  const [autoRefresh, setAutoRefresh] = useState(true);\r\n-\r\n-  // Mock fetch (7 items)\r\n-  const fetchInventory = () => [\r\n-    { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n-    { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n-    { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n-    { id: 4, name: \"Labels\", stock: 8, threshold: 15 },\r\n-    { id: 5, name: \"Pallet Wrap\", stock: 0, threshold: 5 },\r\n-    { id: 6, name: \"Plastic Bags\", stock: 12, threshold: 10 },\r\n-    { id: 7, name: \"Stretch Film\", stock: 3, threshold: 10 },\r\n-  ];\r\n-\r\n-  useEffect(() => {\r\n-    setItems(fetchInventory());\r\n-    if (autoRefresh) {\r\n-      const interval = setInterval(() => setItems(fetchInventory()), 5000);\r\n-      return () => clearInterval(interval);\r\n-    }\r\n-  }, [autoRefresh]);\r\n-\r\n-  const updateStock = (id, delta) => {\r\n-    setItems(items.map(it =>\r\n-      it.id === id ? { ...it, stock: Math.max(0, it.stock + delta) } : it\r\n-    ));\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"container\">\r\n-      <h2>📦 Warehouse Inventory</h2>\r\n-      <label className=\"autorefresh\">\r\n-        <input\r\n-          type=\"checkbox\"\r\n-          checked={autoRefresh}\r\n-          onChange={() => setAutoRefresh(!autoRefresh)}\r\n-        /> Auto Refresh\r\n-      </label>\r\n-\r\n-      <table>\r\n-        <thead>\r\n-          <tr>\r\n-            <th>Item</th>\r\n-            <th>Stock</th>\r\n-            <th>Threshold</th>\r\n-            <th>Alert</th>\r\n-            <th>Update</th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {items.map(it => (\r\n-            <tr key={it.id} className={it.stock < it.threshold ? \"low-stock\" : \"\"}>\r\n-              <td>{it.name}</td>\r\n-              <td>{it.stock}</td>\r\n-              <td>{it.threshold}</td>\r\n-              <td>{it.stock < it.threshold ? \"⚠ Low Stock\" : \"\"}</td>\r\n-              <td>\r\n-                <button onClick={() => updateStock(it.id, -1)}>-</button>\r\n-                <button onClick={() => updateStock(it.id, +1)}>+</button>\r\n-              </td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </table>\r\n-    </div>\r\n-  );\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1755856564479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,67 @@\n-\n+import React, { useEffect, useState } from \"react\";\r\n+import \"./WarehouseInventory.css\"; // import css file\r\n+\r\n+export default function WarehouseInventory() {\r\n+  const [items, setItems] = useState([]);\r\n+  const [autoRefresh, setAutoRefresh] = useState(true);\r\n+\r\n+  // Mock fetch (local data)\r\n+  const fetchInventory = () => [\r\n+    { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n+    { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n+    { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n+  ];\r\n+\r\n+  useEffect(() => {\r\n+    setItems(fetchInventory());\r\n+    if (autoRefresh) {\r\n+      const interval = setInterval(() => setItems(fetchInventory()), 5000);\r\n+      return () => clearInterval(interval);\r\n+    }\r\n+  }, [autoRefresh]);\r\n+\r\n+  const updateStock = (id, delta) => {\r\n+    setItems(items.map(it =>\r\n+      it.id === id ? { ...it, stock: Math.max(0, it.stock + delta) } : it\r\n+    ));\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"container\">\r\n+      <h2>📦 Warehouse Inventory</h2>\r\n+      <label className=\"autorefresh\">\r\n+        <input\r\n+          type=\"checkbox\"\r\n+          checked={autoRefresh}\r\n+          onChange={() => setAutoRefresh(!autoRefresh)}\r\n+        /> Auto Refresh\r\n+      </label>\r\n+\r\n+      <table>\r\n+        <thead>\r\n+          <tr>\r\n+            <th>Item</th>\r\n+            <th>Stock</th>\r\n+            <th>Threshold</th>\r\n+            <th>Alert</th>\r\n+            <th>Update</th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {items.map(it => (\r\n+            <tr key={it.id} className={it.stock < it.threshold ? \"low-stock\" : \"\"}>\r\n+              <td>{it.name}</td>\r\n+              <td>{it.stock}</td>\r\n+              <td>{it.threshold}</td>\r\n+              <td>{it.stock < it.threshold ? \"⚠ Low Stock\" : \"\"}</td>\r\n+              <td>\r\n+                <button onClick={() => updateStock(it.id, -1)}>-</button>\r\n+                <button onClick={() => updateStock(it.id, +1)}>+</button>\r\n+              </td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </table>\r\n+    </div>\r\n+  );\r\n+}\r\n"
                },
                {
                    "date": 1755856640418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,18 @@\n import React, { useEffect, useState } from \"react\";\r\n-import \"./WarehouseInventory.css\"; // import css file\r\n \r\n export default function WarehouseInventory() {\r\n   const [items, setItems] = useState([]);\r\n   const [autoRefresh, setAutoRefresh] = useState(true);\r\n \r\n   // Mock fetch (local data)\r\n-  const fetchInventory = () => [\r\n-    { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n-    { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n-    { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n-  ];\r\n+  const fetchInventory = () => {\r\n+    return [\r\n+      { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n+      { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n+      { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n+    ];\r\n+  };\r\n \r\n   useEffect(() => {\r\n     setItems(fetchInventory());\r\n     if (autoRefresh) {\r\n@@ -26,19 +27,18 @@\n     ));\r\n   };\r\n \r\n   return (\r\n-    <div className=\"container\">\r\n+    <div style={{ padding: 20, fontFamily: \"Arial\" }}>\r\n       <h2>📦 Warehouse Inventory</h2>\r\n-      <label className=\"autorefresh\">\r\n+      <label>\r\n         <input\r\n           type=\"checkbox\"\r\n           checked={autoRefresh}\r\n           onChange={() => setAutoRefresh(!autoRefresh)}\r\n         /> Auto Refresh\r\n       </label>\r\n-\r\n-      <table>\r\n+      <table border=\"1\" cellPadding=\"8\" style={{ marginTop: 10, width: \"100%\" }}>\r\n         <thead>\r\n           <tr>\r\n             <th>Item</th>\r\n             <th>Stock</th>\r\n@@ -48,9 +48,9 @@\n           </tr>\r\n         </thead>\r\n         <tbody>\r\n           {items.map(it => (\r\n-            <tr key={it.id} className={it.stock < it.threshold ? \"low-stock\" : \"\"}>\r\n+            <tr key={it.id} style={{ background: it.stock < it.threshold ? \"#ffcccc\" : \"\" }}>\r\n               <td>{it.name}</td>\r\n               <td>{it.stock}</td>\r\n               <td>{it.threshold}</td>\r\n               <td>{it.stock < it.threshold ? \"⚠ Low Stock\" : \"\"}</td>\r\n@@ -64,4 +64,5 @@\n       </table>\r\n     </div>\r\n   );\r\n }\r\n+\r\n"
                },
                {
                    "date": 1755856762498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n     return [\r\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n+      \r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755856769517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     return [\r\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n-      \r\n+      {id;}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755856780519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     return [\r\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n-      {id;}\r\n+      {id:4}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755856785763,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     return [\r\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n-      {id:4}\r\n+      {id: 4}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755856796047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     return [\r\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n-      {id: 4}\r\n+      { id: 4, name}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755856804006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     return [\r\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n-      { id: 4, name}\r\n+      { id: 4, name: }\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755856838865,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     return [\r\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n-      { id: 4, name: }\r\n+      { id: 4, name: \"pen\"}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755856854581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     return [\r\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n-      { id: 4, name: \"pen\"}\r\n+      { id: 4, name: \"pen\",}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755856862111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     return [\r\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n-      { id: 4, name: \"pen\",}\r\n+      { id: 4, name: \"pen\",stock}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755856867596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     return [\r\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n-      { id: 4, name: \"pen\",stock}\r\n+      { id: 4, name: \"pen\",stock:30}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755856876006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     return [\r\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n-      { id: 4, name: \"pen\",stock:30}\r\n+      { id: 4, name: \"pen\",stock:30,}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755856882543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     return [\r\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n-      { id: 4, name: \"pen\",stock:30,}\r\n+      { id: 4, name: \"pen\",stock:30, threshold}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755856891947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     return [\r\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n-      { id: 4, name: \"pen\",stock:30, threshold}\r\n+      { id: 4, name: \"pen\",stock:30, threshold:17}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755857664005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n           </tr>\r\n         </thead>\r\n         <tbody>\r\n           {items.map(it => (\r\n-            <tr key={it.id} style={{ background: it.stock < it.threshold ? \"#ffcccc\" : \"\" }}>\r\n+            <tr key={it.id} style={{ background: it.stock < it.threshold ? \"#e91212ff\" : \"\" }}>\r\n               <td>{it.name}</td>\r\n               <td>{it.stock}</td>\r\n               <td>{it.threshold}</td>\r\n               <td>{it.stock < it.threshold ? \"⚠ Low Stock\" : \"\"}</td>\r\n"
                },
                {
                    "date": 1755857752906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n               <td>{it.stock}</td>\r\n               <td>{it.threshold}</td>\r\n               <td>{it.stock < it.threshold ? \"⚠ Low Stock\" : \"\"}</td>\r\n               <td>\r\n-                <button onClick={() => updateStock(it.id, -1)}>-</button>\r\n+                <button onClick={() => updateStock(it.id, -1)}> -</button>\r\n                 <button onClick={() => updateStock(it.id, +1)}>+</button>\r\n               </td>\r\n             </tr>\r\n           ))}\r\n"
                },
                {
                    "date": 1755857810155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n+      \r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n@@ -55,9 +56,9 @@\n               <td>{it.stock}</td>\r\n               <td>{it.threshold}</td>\r\n               <td>{it.stock < it.threshold ? \"⚠ Low Stock\" : \"\"}</td>\r\n               <td>\r\n-                <button onClick={() => updateStock(it.id, -1)}> -</button>\r\n+                <button onClick={() => updateStock(it.id, -1)}>-</button>\r\n                 <button onClick={() => updateStock(it.id, +1)}>+</button>\r\n               </td>\r\n             </tr>\r\n           ))}\r\n"
                },
                {
                    "date": 1755857827984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-      \r\n+      { id: 4, name: \"pen\",stock:30, threshold:17}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755857835758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-      { id: 4, name: \"pen\",stock:30, threshold:17}\r\n+      { id: 5, name: \"pen\",stock:30, threshold:17}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755857841815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-      { id: 5, name: \"pen\",stock:30, threshold:17}\r\n+      { id: 5, name: \"\",stock:30, threshold:17}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755857848374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-      { id: 5, name: \"\",stock:30, threshold:17}\r\n+      { id: 5, name: \"Clean\",stock:30, threshold:17}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755857857256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-      { id: 5, name: \"Clean\",stock:30, threshold:17}\r\n+      { id: 5, name: \"Clean Oil\",stock:30, threshold:1}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755857896064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-      { id: 5, name: \"Clean Oil\",stock:30, threshold:1}\r\n+      { id: 5, name: \"Oil\",stock:20, threshold:15}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755857917680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-      { id: 5, name: \"Oil\",stock:20, threshold:15}\r\n+    //   { id: 5, name: \"Oil\",stock:20, threshold:15}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755857932783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,8 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-    //   { id: 5, name: \"Oil\",stock:20, threshold:15}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755857938359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n+      { }\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755857944156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-      { }\r\n+      { id:}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755857951593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-      { id:}\r\n+      { id: 5, name}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755857960322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-      { id: 5, name}\r\n+      { id: 5, name: \"Oil\"}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755857965420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-      { id: 5, name: \"Oil\"}\r\n+      { id: 5, name: \"Oil\",}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755857973371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-      { id: 5, name: \"Oil\",}\r\n+      { id: 5, name: \"Oil\",stock}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755857979260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-      { id: 5, name: \"Oil\",stock}\r\n+      { id: 5, name: \"Oil\",stock:20,}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755857984910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-      { id: 5, name: \"Oil\",stock:20,}\r\n+      { id: 5, name: \"Oil\",stock:20, thr}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755857991542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-      { id: 5, name: \"Oil\",stock:20, thr}\r\n+      { id: 5, name: \"Oil\",stock:20, threshold:14}\r\n     ];\r\n   };\r\n \r\n   useEffect(() => {\r\n"
                },
                {
                    "date": 1755858026285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,8 @@\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n       { id: 5, name: \"Oil\",stock:20, threshold:14}\r\n     ];\r\n   };\r\n-\r\n   useEffect(() => {\r\n     setItems(fetchInventory());\r\n     if (autoRefresh) {\r\n       const interval = setInterval(() => setItems(fetchInventory()), 5000);\r\n"
                },
                {
                    "date": 1755858039178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,11 +10,11 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-      { id: 5, name: \"Oil\",stock:20, threshold:14}\r\n     ];\r\n   };\r\n+\r\n   useEffect(() => {\r\n     setItems(fetchInventory());\r\n     if (autoRefresh) {\r\n       const interval = setInterval(() => setItems(fetchInventory()), 5000);\r\n"
                },
                {
                    "date": 1755858063584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,11 +10,12 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n+      { id: 5, name: \"Oil\",stock:20, threshold:14}\r\n     ];\r\n   };\r\n-\r\n+  \r\n   useEffect(() => {\r\n     setItems(fetchInventory());\r\n     if (autoRefresh) {\r\n       const interval = setInterval(() => setItems(fetchInventory()), 5000);\r\n"
                },
                {
                    "date": 1755858076357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,11 +10,11 @@\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n       { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-      { id: 5, name: \"Oil\",stock:20, threshold:14}\r\n-    ];\r\n-  };\r\n+//       { id: 5, name: \"Oil\",stock:20, threshold:14}\r\n+//     ];\r\n+//   };\r\n   \r\n   useEffect(() => {\r\n     setItems(fetchInventory());\r\n     if (autoRefresh) {\r\n"
                },
                {
                    "date": 1755858086702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,12 @@\n     return [\r\n       { id: 1, name: \"Boxes\", stock: 5, threshold: 10 },\r\n       { id: 2, name: \"Bubble Wrap\", stock: 15, threshold: 20 },\r\n       { id: 3, name: \"Packing Tape\", stock: 50, threshold: 30 },\r\n-      { id: 4, name: \"pen\",stock:30, threshold:17}\r\n-//       { id: 5, name: \"Oil\",stock:20, threshold:14}\r\n-//     ];\r\n-//   };\r\n+      { id: 4, name: \"pen\",stock:30, threshold:17},\r\n+      { id: 5, name: \"Oil\",stock:20, threshold:14}\r\n+    ];\r\n+  };\r\n   \r\n   useEffect(() => {\r\n     setItems(fetchInventory());\r\n     if (autoRefresh) {\r\n"
                },
                {
                    "date": 1755858489104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   };\r\n   \r\n   useEffect(() => {\r\n     setItems(fetchInventory());\r\n-    if (autoRefresh) {\r\n+    // if (autoRefresh) {\r\n       const interval = setInterval(() => setItems(fetchInventory()), 5000);\r\n       return () => clearInterval(interval);\r\n     }\r\n   }, [autoRefresh]);\r\n"
                },
                {
                    "date": 1755858494554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n   };\r\n   \r\n   useEffect(() => {\r\n     setItems(fetchInventory());\r\n-    // if (autoRefresh) {\r\n+    if (autoRefresh) {\r\n       const interval = setInterval(() => setItems(fetchInventory()), 5000);\r\n       return () => clearInterval(interval);\r\n     }\r\n   }, [autoRefresh]);\r\n"
                }
            ],
            "date": 1755856086246,
            "name": "Commit-0",
            "content": "import React, { useEffect, useMemo, useRef, useState } from \"react\";\r\n\r\n/**\r\n * Warehouse Inventory with Low-Stock Alerts\r\n * - Fetch stock (mock API in localStorage)\r\n * - Show alert when stock < threshold\r\n * - Auto-refresh with interval\r\n * - Inline stock updates (−1, +1, or set value)\r\n * - All-in-one single file (easy to drop into Vite React project)\r\n */\r\n\r\n// ---------------- Mock API ----------------\r\nconst STORAGE_KEY = \"warehouse-inventory-data-v1\";\r\n\r\nconst seedData = [\r\n  { id: \"A-1001\", name: \"Corrugated Boxes (Small)\", sku: \"BOX-SM\", stock: 28, threshold: 40 },\r\n  { id: \"A-1002\", name: \"Bubble Wrap 30cm\", sku: \"BUB-30\", stock: 12, threshold: 20 },\r\n  { id: \"A-1003\", name: \"Packing Tape Clear\", sku: \"TAPE-CLR\", stock: 95, threshold: 50 },\r\n  { id: \"A-1004\", name: \"Labels 100x150mm\", sku: \"LBL-100x150\", stock: 6, threshold: 25 },\r\n  { id: \"A-1005\", name: \"Pallet Wrap\", sku: \"WRAP-PAL\", stock: 0, threshold: 10 },\r\n];\r\n\r\nfunction ensureStorage() {\r\n  if (!localStorage.getItem(STORAGE_KEY)) {\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(seedData));\r\n  }\r\n}\r\nfunction readAll() {\r\n  ensureStorage();\r\n  return JSON.parse(localStorage.getItem(STORAGE_KEY));\r\n}\r\nfunction writeAll(items) {\r\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(items));\r\n}\r\nfunction delay(ms) {\r\n  return new Promise((res) => setTimeout(res, ms));\r\n}\r\n\r\nasync function mockFetchInventory() {\r\n  await delay(300);\r\n  return readAll();\r\n}\r\nasync function mockUpdateStock(id, newStock) {\r\n  await delay(200);\r\n  const items = readAll();\r\n  const idx = items.findIndex((x) => x.id === id);\r\n  if (idx !== -1) {\r\n    items[idx].stock = Math.max(0, Number(newStock) || 0);\r\n    writeAll(items);\r\n  }\r\n  return items;\r\n}\r\n\r\n// ---------------- Utils ----------------\r\nfunction classNames(...arr) {\r\n  return arr.filter(Boolean).join(\" \");\r\n}\r\nfunction formatTime(dt) {\r\n  return new Intl.DateTimeFormat(undefined, {\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    second: \"2-digit\",\r\n    hour12: false,\r\n  }).format(dt);\r\n}\r\n\r\n// ---------------- Main Component ----------------\r\nexport default function WarehouseInventory() {\r\n  const [items, setItems] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  const [lastUpdated, setLastUpdated] = useState(null);\r\n\r\n  const [filter, setFilter] = useState(\"\");\r\n  const [onlyLow, setOnlyLow] = useState(false);\r\n  const [autoRefresh, setAutoRefresh] = useState(true);\r\n  const [intervalMs, setIntervalMs] = useState(10000);\r\n  const timerRef = useRef(null);\r\n\r\n  const [drafts, setDrafts] = useState({}); // inline edit values\r\n\r\n  // Fetch inventory\r\n  const fetchData = async () => {\r\n    try {\r\n      setError(\"\");\r\n      setLoading(true);\r\n      const data = await mockFetchInventory();\r\n      setItems(data);\r\n      setLastUpdated(new Date());\r\n    } catch (e) {\r\n      console.error(e);\r\n      setError(\"Failed to fetch inventory\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Auto-refresh\r\n  useEffect(() => {\r\n    if (!autoRefresh) {\r\n      if (timerRef.current) clearInterval(timerRef.current);\r\n      return;\r\n    }\r\n    timerRef.current = setInterval(fetchData, intervalMs);\r\n    return () => timerRef.current && clearInterval(timerRef.current);\r\n  }, [autoRefresh, intervalMs]);\r\n\r\n  const lowStockCount = useMemo(\r\n    () => items.filter((it) => it.stock < it.threshold).length,\r\n    [items]\r\n  );\r\n\r\n  const filtered = useMemo(() => {\r\n    let list = items;\r\n    const q = filter.trim().toLowerCase();\r\n    if (q) {\r\n      list = list.filter(\r\n        (it) =>\r\n          it.name.toLowerCase().includes(q) ||\r\n          it.sku.toLowerCase().includes(q) ||\r\n          it.id.toLowerCase().includes(q)\r\n      );\r\n    }\r\n    if (onlyLow) list = list.filter((it) => it.stock < it.threshold);\r\n\r\n    return [...list].sort((a, b) => {\r\n      const aLow = a.stock < a.threshold ? 1 : 0;\r\n      const bLow = b.stock < b.threshold ? 1 : 0;\r\n      if (aLow !== bLow) return bLow - aLow;\r\n      return a.name.localeCompare(b.name);\r\n    });\r\n  }, [items, filter, onlyLow]);\r\n\r\n  // Update stock\r\n  const handleAdjust = async (id, delta) => {\r\n    const item = items.find((x) => x.id === id);\r\n    if (!item) return;\r\n    const next = Math.max(0, item.stock + delta);\r\n    const data = await mockUpdateStock(id, next);\r\n    setItems(data);\r\n    setLastUpdated(new Date());\r\n  };\r\n  const handleSaveDraft = async (id) => {\r\n    const value = drafts[id];\r\n    if (value == null || value === \"\") return;\r\n    const data = await mockUpdateStock(id, Number(value));\r\n    setItems(data);\r\n    setLastUpdated(new Date());\r\n  };\r\n  const handleChangeDraft = (id, value) => {\r\n    setDrafts((d) => ({ ...d, [id]: value.replace(/[^0-9]/g, \"\") }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 text-gray-900 p-6\">\r\n      {/* Header */}\r\n      <div className=\"max-w-6xl mx-auto\">\r\n        <header className=\"flex flex-col gap-3 md:flex-row md:items-end md:justify-between\">\r\n          <div>\r\n            <h1 className=\"text-2xl md:text-3xl font-semibold tracking-tight\">\r\n              Warehouse Inventory\r\n            </h1>\r\n            <p className=\"text-sm text-gray-600\">\r\n              Low-Stock Alerts • Auto-Refresh • Inline Updates\r\n            </p>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <button\r\n              onClick={fetchData}\r\n              className=\"px-3 py-2 rounded-xl bg-black text-white text-sm disabled:opacity-50 shadow\"\r\n              disabled={loading}\r\n            >\r\n              {loading ? \"Refreshing…\" : \"Refresh Now\"}\r\n            </button>\r\n            <div className=\"text-xs text-gray-600\">\r\n              {lastUpdated && <span>Last updated: {formatTime(lastUpdated)}</span>}\r\n            </div>\r\n          </div>\r\n        </header>\r\n\r\n        {/* Alerts */}\r\n        <div className=\"mt-4\">\r\n          {lowStockCount > 0 ? (\r\n            <div className=\"rounded-2xl border border-amber-300 bg-amber-50 px-4 py-3 text-amber-900\">\r\n              <strong className=\"font-medium\">Attention:</strong>{\" \"}\r\n              {lowStockCount} item{lowStockCount !== 1 ? \"s\" : \"\"} below threshold.\r\n            </div>\r\n          ) : (\r\n            <div className=\"rounded-2xl border border-emerald-300 bg-emerald-50 px-4 py-3 text-emerald-900\">\r\n              <strong className=\"font-medium\">All good:</strong> No low-stock items.\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Controls */}\r\n        <section className=\"mt-4 grid gap-3 md:grid-cols-3\">\r\n          <div className=\"col-span-2 flex items-center gap-3\">\r\n            <input\r\n              className=\"w-full rounded-2xl border px-3 py-2 text-sm outline-none focus:ring-2 focus:ring-black\"\r\n              placeholder=\"Search by name, SKU, or ID…\"\r\n              value={filter}\r\n              onChange={(e) => setFilter(e.target.value)}\r\n            />\r\n            <label className=\"flex items-center gap-2 text-sm\">\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={onlyLow}\r\n                onChange={(e) => setOnlyLow(e.target.checked)}\r\n              />\r\n              Only low stock\r\n            </label>\r\n          </div>\r\n          <div className=\"flex items-center justify-between md:justify-end gap-3\">\r\n            <label className=\"text-sm flex items-center gap-2\">\r\n              Auto-refresh\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={autoRefresh}\r\n                onChange={(e) => setAutoRefresh(e.target.checked)}\r\n              />\r\n            </label>\r\n            <label className=\"text-sm flex items-center gap-2\">\r\n              Every\r\n              <select\r\n                className=\"rounded-xl border px-2 py-1 text-sm\"\r\n                value={intervalMs}\r\n                onChange={(e) => setIntervalMs(Number(e.target.value))}\r\n              >\r\n                <option value={5000}>5s</option>\r\n                <option value={10000}>10s</option>\r\n                <option value={30000}>30s</option>\r\n                <option value={60000}>60s</option>\r\n              </select>\r\n            </label>\r\n          </div>\r\n        </section>\r\n\r\n        {/* Table */}\r\n        <div className=\"mt-4 overflow-x-auto rounded-2xl border bg-white shadow-sm\">\r\n          <table className=\"min-w-full text-sm\">\r\n            <thead className=\"bg-gray-100\">\r\n              <tr className=\"text-left text-gray-600\">\r\n                <th className=\"px-4 py-3\">Item</th>\r\n                <th className=\"px-4 py-3\">SKU</th>\r\n                <th className=\"px-4 py-3\">Stock</th>\r\n                <th className=\"px-4 py-3\">Threshold</th>\r\n                <th className=\"px-4 py-3\">Status</th>\r\n                <th className=\"px-4 py-3\">Update</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {filtered.map((it) => {\r\n                const isLow = it.stock < it.threshold;\r\n                return (\r\n                  <tr key={it.id} className={classNames(\"border-t\", isLow && \"bg-amber-50/60\")}>\r\n                    <td className=\"px-4 py-3\">\r\n                      <div className=\"font-medium\">{it.name}</div>\r\n                      <div className=\"text-xs text-gray-500\">ID: {it.id}</div>\r\n                    </td>\r\n                    <td className=\"px-4 py-3\">{it.sku}</td>\r\n                    <td className=\"px-4 py-3 font-mono\">{it.stock}</td>\r\n                    <td className=\"px-4 py-3 font-mono\">{it.threshold}</td>\r\n                    <td className=\"px-4 py-3\">\r\n                      {isLow ? (\r\n                        <span className=\"inline-flex items-center rounded-full border border-amber-300 bg-amber-100 px-2 py-0.5 text-[11px] font-semibold text-amber-900\">\r\n                          Low\r\n                        </span>\r\n                      ) : (\r\n                        <span className=\"inline-flex items-center rounded-full border border-emerald-300 bg-emerald-100 px-2 py-0.5 text-[11px] font-semibold text-emerald-900\">\r\n                          OK\r\n                        </span>\r\n                      )}\r\n                    </td>\r\n                    <td className=\"px-4 py-3\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <button\r\n                          onClick={() => handleAdjust(it.id, -1)}\r\n                          className=\"px-2 py-1 rounded-lg border hover:bg-gray-50\"\r\n                        >\r\n                          −1\r\n                        </button>\r\n                        <button\r\n                          onClick={() => handleAdjust(it.id, +1)}\r\n                          className=\"px-2 py-1 rounded-lg border hover:bg-gray-50\"\r\n                        >\r\n                          +1\r\n                        </button>\r\n                        <input\r\n                          className=\"w-20 rounded-lg border px-2 py-1 text-sm font-mono\"\r\n                          placeholder={`${it.stock}`}\r\n                          value={drafts[it.id] ?? \"\"}\r\n                          onChange={(e) => handleChangeDraft(it.id, e.target.value)}\r\n                          inputMode=\"numeric\"\r\n                        />\r\n                        <button\r\n                          onClick={() => handleSaveDraft(it.id)}\r\n                          className=\"px-3 py-1.5 rounded-lg bg-black text-white text-xs\"\r\n                        >\r\n                          Save\r\n                        </button>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n\r\n              {!loading && filtered.length === 0 && (\r\n                <tr>\r\n                  <td colSpan={6} className=\"px-4 py-12 text-center text-gray-500\">\r\n                    No items found.\r\n                  </td>\r\n                </tr>\r\n              )}\r\n              {loading && (\r\n                <tr>\r\n                  <td colSpan={6} className=\"px-4 py-12 text-center text-gray-500\">\r\n                    Loading…\r\n                  </td>\r\n                </tr>\r\n              )}\r\n              {error && (\r\n                <tr>\r\n                  <td colSpan={6} className=\"px-4 py-3 text-center text-red-700 bg-red-50\">\r\n                    {error}\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <p className=\"mt-4 text-xs text-gray-500\">\r\n          Demo uses <code>localStorage</code> as a mock backend. Replace{\" \"}\r\n          <code>mockFetchInventory</code> / <code>mockUpdateStock</code> with real API calls.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
        }
    ]
}